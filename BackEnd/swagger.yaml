swagger: "2.0"
info:
  description: "This is a experiment of an api development."
  version: "1.0.0"
  title: "Hostpost Swagger API"
host: "localhost:3001"
basePath: "/"

schemes:
  - "http"

securityDefinitions:
  BearerAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"

paths:

  /auth/login:
    post:
      tags:
        - "Authentication"
      summary: "Authenticate a user"
      description: "Authenticate a user using their email and password"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                example: "johndoe@gmail.com"
              password:
                type: string
                example: "password123"
      responses:
        200:
          description: "Successful login"
          schema:
            type: object
            properties:
              token:
                type: string
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNTE2MjM5MDIyfQ.8yvqlVwRwGc32MWKKW5Of8Zv7p_XoPNrkK9qVAbDKSE"
              user:
                type: object
                properties:
                  _id:
                    type: string
                    example: "6069c1dfe0d241a1b2eabcde"
                  firstName:
                    type: string
                    example: "John"
                  lastName:
                    type: string
                    example: "Doe"
                  email:
                    type: string
                    example: "johndoe@gmail.com"
                  picturePath:
                    type: string
                    example: "/images/profile.png"
                  friends:
                    type: array
                    items:
                      type: string
                    example: ["6069c1dfe0d241a1b2eabcd1", "6069c1dfe0d241a1b2eabcd2"]
                  location:
                    type: string
                    example: "Los Angeles, CA"
                  occupation:
                    type: string
                    example: "Software Engineer"
        400:
          description: "Invalid credentials"
        500:
          description: "Server error"
          
  /users/{id}:
    get:
      summary: Get user by ID
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: The user ID
          required: true
          type: string
      security:
        - BearerAuth: []
      responses:
        200:
          description: Returns the specified user
        401:
          description: Unauthorized
        404:
          description: User not found

  /users/{id}/friends:
    get:
      summary: Get user friends
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: The user ID
          required: true
          type: string
      security:
        - BearerAuth: []
      responses:
        200:
          description: Returns the specified user's friends
        401:
          description: Unauthorized
        404:
          description: User not found

  /users/{id}/{friendId}:
    patch:
      summary: Add or remove friend
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: The user ID
          required: true
          type: string
        - name: friendId
          in: path
          description: The friend's user ID
          required: true
          type: string
      security:
        - BearerAuth: []
      responses:
        200:
          description: Returns the updated user
        401:
          description: Unauthorized
        404:
          description: User not found

  /conversations:
    post:
      summary: Create a new conversation between two users
      tags:
        - Conversations
      parameters:
        - in: body
          name: conversation
          description: The conversation object to create
          required: true
          schema:
            type: object
            properties:
              senderId:
                type: string
                example: "12345"
              receiverId:
                type: string
                example: "67890"
      responses:
        200:
          description: The newly created conversation
          schema:
        500:
          description: Internal server error
          
  /conversations/{userID}/:
    get:
      summary: Get the conversation by User ID
      tags:
        - Conversations
      parameters:
        - in: path
          name: userID
          description: The ID of the first user
          required: true
          type: string
      responses:
        200:
          description: The conversation between the two specified users
        500:
          description: Internal server error
  /conversations/find/{firstUserId}/{secondUserId}:
    get:
      summary: Get the conversation between two specified users
      tags:
        - Conversations
      parameters:
        - in: path
          name: firstUserId
          description: The ID of the first user
          required: true
          type: string
        - in: path
          name: secondUserId
          description: The ID of the second user
          required: true
          type: string
      responses:
        200:
          description: The conversation between the two specified users
        500:
          description: Internal server error
  /messages:
    post:
      summary: Add a new message
      tags:
        - Messages
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: message
          description: The message to add
          schema:
            type: object
            properties:
              conversationId:
                type: string
              sender:
                type: string
              text:
                type: string
              required:
                - conversationId
                - sender
                - text
      responses:
        '200':
          description: OK
        '500':
          description: Internal Server Error
  /messages/{conversationId}:
      get:
        summary: Get messages for a conversation
        tags:
          - Messages
        produces:
          - application/json
        parameters:
          - in: path
            name: conversationId
            type: string
            required: true
            description: ID of the conversation to get messages for
        responses:
          '200':
            description: OK
          '500':
            description: Internal Server Error

  /posts:
    get:
      tags:
        - "Posts"
      summary: "Get all posts"
      description: "Returns a list of all posts."
      produces:
        - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Post"
        401:
          description: "Unauthorized"
      security:
        - bearerAuth: []
    patch:
      tags:
        - "Posts"
      summary: "Like a post"
      description: "Like a post by its ID."
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the post to like."
          required: true
          type: "string"
        - in: "header"
          name: "Authorization"
          description: "Access token."
          required: true
          type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Post"
        401:
          description: "Unauthorized"
  /posts/{userId}/posts:
    get:
      tags:
        - "Posts"
      summary: "Get a user's posts"
      description: "Returns a list of a user's posts."
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "userId"
          description: "ID of the user whose posts to retrieve."
          required: true
          type: "string"
        - in: "header"
          name: "Authorization"
          description: "Access token."
          required: true
          type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Post"
        401:
          description: "Unauthorized"
    security:
        - bearerAuth: []
  /posts/{id}/comment:
    patch:
      tags:
        - "Posts"
      summary: "Comment on a post"
      description: "Add a comment to a post by its ID."
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the post to comment on."
          required: true
          type: "string"
        - in: "header"
          name: "Authorization"
          description: "Access token."
          required: true
          type: "string"
        - in: "body"
          name: "comment"
          description: "Comment content."
          required: true
          schema:
            type: "object"
            properties:
              comment:
                type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Post"
        401:
          description: "Unauthorized"
  /swagger:
    get:
      tags:
        - "Swagger"
      summary: "Get Swagger documentation"
      description: "Returns the Swagger UI to display the API documentation."
      produces:
        - "text/html"
      responses:
        200:
          description: "Successful operation"
  
